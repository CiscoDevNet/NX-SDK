# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_nx_sdk_py')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_nx_sdk_py')
    _nx_sdk_py = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nx_sdk_py', [dirname(__file__)])
        except ImportError:
            import _nx_sdk_py
            return _nx_sdk_py
        if fp is not None:
            try:
                _mod = imp.load_module('_nx_sdk_py', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _nx_sdk_py = swig_import_helper()
    del swig_import_helper
else:
    import _nx_sdk_py
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class NxSdk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxSdk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxSdk, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nx_sdk_py.delete_NxSdk
    __del__ = lambda self: None

    def setAppDesc(self, desc):
        return _nx_sdk_py.NxSdk_setAppDesc(self, desc)

    def getAppName(self):
        return _nx_sdk_py.NxSdk_getAppName(self)

    def getAppDesc(self):
        return _nx_sdk_py.NxSdk_getAppDesc(self)

    def getAppId(self):
        return _nx_sdk_py.NxSdk_getAppId(self)

    def getCliParser(self):
        return _nx_sdk_py.NxSdk_getCliParser(self)

    def getTracer(self):
        return _nx_sdk_py.NxSdk_getTracer(self)

    def startEventLoop(self):
        return _nx_sdk_py.NxSdk_startEventLoop(self)

    def stopEventLoop(self):
        return _nx_sdk_py.NxSdk_stopEventLoop(self)

    def getRibMgr(self):
        return _nx_sdk_py.NxSdk_getRibMgr(self)

    def setAppPriority(self, prio):
        return _nx_sdk_py.NxSdk_setAppPriority(self, prio)

    def getIntfMgr(self):
        return _nx_sdk_py.NxSdk_getIntfMgr(self)

    def getAdjMgr(self):
        return _nx_sdk_py.NxSdk_getAdjMgr(self)

    def getMacMgr(self):
        return _nx_sdk_py.NxSdk_getMacMgr(self)

    def getDmeMgr(self):
        return _nx_sdk_py.NxSdk_getDmeMgr(self)

    def isInEventLoop(self):
        return _nx_sdk_py.NxSdk_isInEventLoop(self)

    def getRunningEnv(self):
        return _nx_sdk_py.NxSdk_getRunningEnv(self)

    def getRemoteIp(self):
        return _nx_sdk_py.NxSdk_getRemoteIp(self)

    def getRemotePort(self):
        return _nx_sdk_py.NxSdk_getRemotePort(self)

    def getRemoteConnStatus(self):
        return _nx_sdk_py.NxSdk_getRemoteConnStatus(self)

    def purgeAllSdkObjs(self):
        return _nx_sdk_py.NxSdk_purgeAllSdkObjs(self)

    def setSdkHandler(self, handler):
        return _nx_sdk_py.NxSdk_setSdkHandler(self, handler)

    def unsetSdkHandler(self):
        return _nx_sdk_py.NxSdk_unsetSdkHandler(self)

    def getSdkHandler(self):
        return _nx_sdk_py.NxSdk_getSdkHandler(self)
    if _newclass:
        getSdkInst = staticmethod(_nx_sdk_py.NxSdk_getSdkInst)
    else:
        getSdkInst = _nx_sdk_py.NxSdk_getSdkInst

    def getNxSdkVersion(self):
        return _nx_sdk_py.NxSdk_getNxSdkVersion(self)

    def getRemoteClientNxSdkVersion(self):
        return _nx_sdk_py.NxSdk_getRemoteClientNxSdkVersion(self)
NxSdk_swigregister = _nx_sdk_py.NxSdk_swigregister
NxSdk_swigregister(NxSdk)

def NxSdk_getSdkInst(*args):
    return _nx_sdk_py.NxSdk_getSdkInst(*args)
NxSdk_getSdkInst = _nx_sdk_py.NxSdk_getSdkInst

class NxSdkHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxSdkHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxSdkHandler, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _nx_sdk_py.delete_NxSdkHandler
    __del__ = lambda self: None

    def postRemoteConnUpCb(self, sdk):
        return _nx_sdk_py.NxSdkHandler_postRemoteConnUpCb(self, sdk)

    def postRemoteConnDownCb(self, sdk):
        return _nx_sdk_py.NxSdkHandler_postRemoteConnDownCb(self, sdk)

    def __init__(self):
        if self.__class__ == NxSdkHandler:
            _self = None
        else:
            _self = self
        this = _nx_sdk_py.new_NxSdkHandler(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _nx_sdk_py.disown_NxSdkHandler(self)
        return weakref_proxy(self)
NxSdkHandler_swigregister = _nx_sdk_py.NxSdkHandler_swigregister
NxSdkHandler_swigregister(NxSdkHandler)

class NxCliCmd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxCliCmd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxCliCmd, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    CONF_MODE = _nx_sdk_py.NxCliCmd_CONF_MODE
    EXEC_MODE = _nx_sdk_py.NxCliCmd_EXEC_MODE
    MAX_MODE = _nx_sdk_py.NxCliCmd_MAX_MODE
    CONF_CMD = _nx_sdk_py.NxCliCmd_CONF_CMD
    SHOW_CMD = _nx_sdk_py.NxCliCmd_SHOW_CMD
    MAX_CMD = _nx_sdk_py.NxCliCmd_MAX_CMD
    __swig_destroy__ = _nx_sdk_py.delete_NxCliCmd
    __del__ = lambda self: None

    def updateParam(self, *args):
        return _nx_sdk_py.NxCliCmd_updateParam(self, *args)

    def addTimeout(self, timeout):
        return _nx_sdk_py.NxCliCmd_addTimeout(self, timeout)

    def addMode(self, mode):
        return _nx_sdk_py.NxCliCmd_addMode(self, mode)

    def getCmdType(self):
        return _nx_sdk_py.NxCliCmd_getCmdType(self)

    def getCmdMode(self):
        return _nx_sdk_py.NxCliCmd_getCmdMode(self)

    def getCmdName(self):
        return _nx_sdk_py.NxCliCmd_getCmdName(self)

    def getCmdSyntax(self):
        return _nx_sdk_py.NxCliCmd_getCmdSyntax(self)

    def getCmdLineStr(self):
        return _nx_sdk_py.NxCliCmd_getCmdLineStr(self)

    def getCmdErr(self):
        return _nx_sdk_py.NxCliCmd_getCmdErr(self)

    def isKeywordSet(self, keyword_name):
        return _nx_sdk_py.NxCliCmd_isKeywordSet(self, keyword_name)

    def getParamType(self, param_name):
        return _nx_sdk_py.NxCliCmd_getParamType(self, param_name)

    def getParamValue(self, param_name, fromFirst=False):
        return _nx_sdk_py.NxCliCmd_getParamValue(self, param_name, fromFirst)

    def getParamCount(self, param_name):
        return _nx_sdk_py.NxCliCmd_getParamCount(self, param_name)

    def printConsole(self, fmt):
        return _nx_sdk_py.NxCliCmd_printConsole(self, fmt)

    def updateKeyword(self, *args):
        return _nx_sdk_py.NxCliCmd_updateKeyword(self, *args)

    def showCliOutFormat(self):
        return _nx_sdk_py.NxCliCmd_showCliOutFormat(self)
NxCliCmd_swigregister = _nx_sdk_py.NxCliCmd_swigregister
NxCliCmd_swigregister(NxCliCmd)

class NxCmdHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxCmdHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxCmdHandler, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _nx_sdk_py.delete_NxCmdHandler
    __del__ = lambda self: None

    def postCliCb(self, cmd):
        return _nx_sdk_py.NxCmdHandler_postCliCb(self, cmd)

    def __init__(self):
        if self.__class__ == NxCmdHandler:
            _self = None
        else:
            _self = self
        this = _nx_sdk_py.new_NxCmdHandler(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _nx_sdk_py.disown_NxCmdHandler(self)
        return weakref_proxy(self)
NxCmdHandler_swigregister = _nx_sdk_py.NxCmdHandler_swigregister
NxCmdHandler_swigregister(NxCmdHandler)

class NxCliParser(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxCliParser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxCliParser, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nx_sdk_py.delete_NxCliParser
    __del__ = lambda self: None

    def newCliCmd(self, ctype, cmd_name, syntax):
        return _nx_sdk_py.NxCliParser_newCliCmd(self, ctype, cmd_name, syntax)

    def newShowCmd(self, cmd_name, syntax):
        return _nx_sdk_py.NxCliParser_newShowCmd(self, cmd_name, syntax)

    def newConfigCmd(self, cmd_name, syntax):
        return _nx_sdk_py.NxCliParser_newConfigCmd(self, cmd_name, syntax)

    def addToParseTree(self):
        return _nx_sdk_py.NxCliParser_addToParseTree(self)

    def delFromParseTree(self):
        return _nx_sdk_py.NxCliParser_delFromParseTree(self)

    def setCmdHandler(self, handler):
        return _nx_sdk_py.NxCliParser_setCmdHandler(self, handler)

    def getParserStatus(self):
        return _nx_sdk_py.NxCliParser_getParserStatus(self)

    def getCmdHandler(self):
        return _nx_sdk_py.NxCliParser_getCmdHandler(self)

    def execShowCmd(self, *args):
        return _nx_sdk_py.NxCliParser_execShowCmd(self, *args)

    def execConfigCmd(self, *args):
        return _nx_sdk_py.NxCliParser_execConfigCmd(self, *args)

    def addTechSupport(self, *args):
        return _nx_sdk_py.NxCliParser_addTechSupport(self, *args)
NxCliParser_swigregister = _nx_sdk_py.NxCliParser_swigregister
NxCliParser_swigregister(NxCliParser)

class NxSyslog(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxSyslog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxSyslog, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nx_sdk_py.delete_NxSyslog
    __del__ = lambda self: None

    def getId(self):
        return _nx_sdk_py.NxSyslog_getId(self)

    def getNodeName(self):
        return _nx_sdk_py.NxSyslog_getNodeName(self)

    def getTimeStamp(self):
        return _nx_sdk_py.NxSyslog_getTimeStamp(self)

    def getSeverity(self):
        return _nx_sdk_py.NxSyslog_getSeverity(self)

    def getMessageName(self):
        return _nx_sdk_py.NxSyslog_getMessageName(self)

    def getCategory(self):
        return _nx_sdk_py.NxSyslog_getCategory(self)

    def getText(self):
        return _nx_sdk_py.NxSyslog_getText(self)

    def getTimeZone(self):
        return _nx_sdk_py.NxSyslog_getTimeZone(self)
NxSyslog_swigregister = _nx_sdk_py.NxSyslog_swigregister
NxSyslog_swigregister(NxSyslog)

class NxTraceHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxTraceHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxTraceHandler, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _nx_sdk_py.delete_NxTraceHandler
    __del__ = lambda self: None

    def postSyslogCb(self, syslog):
        return _nx_sdk_py.NxTraceHandler_postSyslogCb(self, syslog)

    def postSyslogDownloadDoneCb(self):
        return _nx_sdk_py.NxTraceHandler_postSyslogDownloadDoneCb(self)

    def __init__(self):
        if self.__class__ == NxTraceHandler:
            _self = None
        else:
            _self = self
        this = _nx_sdk_py.new_NxTraceHandler(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _nx_sdk_py.disown_NxTraceHandler(self)
        return weakref_proxy(self)
NxTraceHandler_swigregister = _nx_sdk_py.NxTraceHandler_swigregister
NxTraceHandler_swigregister(NxTraceHandler)

class NxTrace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxTrace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxTrace, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    EMERG = _nx_sdk_py.NxTrace_EMERG
    ALERT = _nx_sdk_py.NxTrace_ALERT
    CTRI = _nx_sdk_py.NxTrace_CTRI
    ERR = _nx_sdk_py.NxTrace_ERR
    WARNING = _nx_sdk_py.NxTrace_WARNING
    NOTICE = _nx_sdk_py.NxTrace_NOTICE
    INFO = _nx_sdk_py.NxTrace_INFO
    DEBUG = _nx_sdk_py.NxTrace_DEBUG
    __swig_destroy__ = _nx_sdk_py.delete_NxTrace
    __del__ = lambda self: None

    def syslog(self, prio, fmt):
        return _nx_sdk_py.NxTrace_syslog(self, prio, fmt)

    def event(self, fmt):
        return _nx_sdk_py.NxTrace_event(self, fmt)

    def error(self, fmt):
        return _nx_sdk_py.NxTrace_error(self, fmt)
    if _newclass:
        getPrioStr = staticmethod(_nx_sdk_py.NxTrace_getPrioStr)
    else:
        getPrioStr = _nx_sdk_py.NxTrace_getPrioStr

    def watchSyslog(self, download=True):
        return _nx_sdk_py.NxTrace_watchSyslog(self, download)

    def unwatchSyslog(self):
        return _nx_sdk_py.NxTrace_unwatchSyslog(self)

    def setTraceHandler(self, handler):
        return _nx_sdk_py.NxTrace_setTraceHandler(self, handler)

    def getTraceHandler(self):
        return _nx_sdk_py.NxTrace_getTraceHandler(self)
NxTrace_swigregister = _nx_sdk_py.NxTrace_swigregister
NxTrace_swigregister(NxTrace)

def NxTrace_getPrioStr(prio):
    return _nx_sdk_py.NxTrace_getPrioStr(prio)
NxTrace_getPrioStr = _nx_sdk_py.NxTrace_getPrioStr

class NxVrf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxVrf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxVrf, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nx_sdk_py.delete_NxVrf
    __del__ = lambda self: None

    def getName(self):
        return _nx_sdk_py.NxVrf_getName(self)

    def getId(self):
        return _nx_sdk_py.NxVrf_getId(self)

    def getTableId(self, af):
        return _nx_sdk_py.NxVrf_getTableId(self, af)

    def getState(self):
        return _nx_sdk_py.NxVrf_getState(self)

    def getEvent(self):
        return _nx_sdk_py.NxVrf_getEvent(self)

    def __eq__(self, vrf_obj):
        return _nx_sdk_py.NxVrf___eq__(self, vrf_obj)

    def __ne__(self, vrf_obj):
        return _nx_sdk_py.NxVrf___ne__(self, vrf_obj)

    def equal(self, vrf_obj):
        return _nx_sdk_py.NxVrf_equal(self, vrf_obj)
NxVrf_swigregister = _nx_sdk_py.NxVrf_swigregister
NxVrf_swigregister(NxVrf)

class NxL3NextHop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxL3NextHop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxL3NextHop, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ATTACHED = _nx_sdk_py.NxL3NextHop_ATTACHED
    LOCAL = _nx_sdk_py.NxL3NextHop_LOCAL
    DIRECT = _nx_sdk_py.NxL3NextHop_DIRECT
    RECURSIVE = _nx_sdk_py.NxL3NextHop_RECURSIVE
    BACKUP = _nx_sdk_py.NxL3NextHop_BACKUP
    DROP = _nx_sdk_py.NxL3NextHop_DROP
    DISCARD = _nx_sdk_py.NxL3NextHop_DISCARD
    __swig_destroy__ = _nx_sdk_py.delete_NxL3NextHop
    __del__ = lambda self: None

    def getAddress(self):
        return _nx_sdk_py.NxL3NextHop_getAddress(self)

    def getOutInterface(self):
        return _nx_sdk_py.NxL3NextHop_getOutInterface(self)

    def getVrfName(self):
        return _nx_sdk_py.NxL3NextHop_getVrfName(self)

    def getOwner(self):
        return _nx_sdk_py.NxL3NextHop_getOwner(self)

    def getPreference(self):
        return _nx_sdk_py.NxL3NextHop_getPreference(self)

    def getMetric(self):
        return _nx_sdk_py.NxL3NextHop_getMetric(self)

    def getTag(self):
        return _nx_sdk_py.NxL3NextHop_getTag(self)

    def getSegmentId(self):
        return _nx_sdk_py.NxL3NextHop_getSegmentId(self)

    def getTunnelId(self):
        return _nx_sdk_py.NxL3NextHop_getTunnelId(self)

    def getEncapType(self):
        return _nx_sdk_py.NxL3NextHop_getEncapType(self)

    def checkType(self, type):
        return _nx_sdk_py.NxL3NextHop_checkType(self, type)
NxL3NextHop_swigregister = _nx_sdk_py.NxL3NextHop_swigregister
NxL3NextHop_swigregister(NxL3NextHop)

class NxL3Route(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxL3Route, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxL3Route, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nx_sdk_py.delete_NxL3Route
    __del__ = lambda self: None

    def getVrfName(self):
        return _nx_sdk_py.NxL3Route_getVrfName(self)

    def getAddress(self):
        return _nx_sdk_py.NxL3Route_getAddress(self)

    def getMaskLen(self):
        return _nx_sdk_py.NxL3Route_getMaskLen(self)

    def getL3NextHopCount(self):
        return _nx_sdk_py.NxL3Route_getL3NextHopCount(self)

    def getL3NextHop(self, *args):
        return _nx_sdk_py.NxL3Route_getL3NextHop(self, *args)

    def getEvent(self):
        return _nx_sdk_py.NxL3Route_getEvent(self)

    def __eq__(self, route_obj):
        return _nx_sdk_py.NxL3Route___eq__(self, route_obj)

    def __ne__(self, route_obj):
        return _nx_sdk_py.NxL3Route___ne__(self, route_obj)

    def equal(self, route_obj):
        return _nx_sdk_py.NxL3Route_equal(self, route_obj)

    def addL3DirectNextHop(self, nextHopAddr, intfName, preference):
        return _nx_sdk_py.NxL3Route_addL3DirectNextHop(self, nextHopAddr, intfName, preference)

    def addL3RecursiveNextHop(self, nextHopAddr, preference):
        return _nx_sdk_py.NxL3Route_addL3RecursiveNextHop(self, nextHopAddr, preference)

    def delL3NextHop(self, *args):
        return _nx_sdk_py.NxL3Route_delL3NextHop(self, *args)

    def getL3Prefix(self):
        return _nx_sdk_py.NxL3Route_getL3Prefix(self)
NxL3Route_swigregister = _nx_sdk_py.NxL3Route_swigregister
NxL3Route_swigregister(NxL3Route)

class NxRibMgrHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxRibMgrHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxRibMgrHandler, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _nx_sdk_py.delete_NxRibMgrHandler
    __del__ = lambda self: None

    def postL3RouteCb(self, route):
        return _nx_sdk_py.NxRibMgrHandler_postL3RouteCb(self, route)

    def postVrfCb(self, vrf):
        return _nx_sdk_py.NxRibMgrHandler_postVrfCb(self, vrf)

    def postL3RecursiveNextHopCb(self, rnhRoute, isResolved):
        return _nx_sdk_py.NxRibMgrHandler_postL3RecursiveNextHopCb(self, rnhRoute, isResolved)

    def postMyL3RouteCb(self, route):
        return _nx_sdk_py.NxRibMgrHandler_postMyL3RouteCb(self, route)

    def postL3RouteRepopulateCb(self, vrfName, routeAddress, maskLen=0):
        return _nx_sdk_py.NxRibMgrHandler_postL3RouteRepopulateCb(self, vrfName, routeAddress, maskLen)

    def __init__(self):
        if self.__class__ == NxRibMgrHandler:
            _self = None
        else:
            _self = self
        this = _nx_sdk_py.new_NxRibMgrHandler(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _nx_sdk_py.disown_NxRibMgrHandler(self)
        return weakref_proxy(self)
NxRibMgrHandler_swigregister = _nx_sdk_py.NxRibMgrHandler_swigregister
NxRibMgrHandler_swigregister(NxRibMgrHandler)

class NxRibMgr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxRibMgr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxRibMgr, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nx_sdk_py.delete_NxRibMgr
    __del__ = lambda self: None

    def getVrf(self, *args):
        return _nx_sdk_py.NxRibMgr_getVrf(self, *args)

    def watchVrf(self, *args):
        return _nx_sdk_py.NxRibMgr_watchVrf(self, *args)

    def unwatchVrf(self, *args):
        return _nx_sdk_py.NxRibMgr_unwatchVrf(self, *args)

    def setRibMgrHandler(self, handler):
        return _nx_sdk_py.NxRibMgr_setRibMgrHandler(self, handler)

    def getRibMgrHandler(self):
        return _nx_sdk_py.NxRibMgr_getRibMgrHandler(self)

    def getL3Route(self, *args):
        return _nx_sdk_py.NxRibMgr_getL3Route(self, *args)

    def watchL3Route(self, *args):
        return _nx_sdk_py.NxRibMgr_watchL3Route(self, *args)

    def unwatchL3Route(self, *args):
        return _nx_sdk_py.NxRibMgr_unwatchL3Route(self, *args)

    def getL3RouteDetail(self, *args):
        return _nx_sdk_py.NxRibMgr_getL3RouteDetail(self, *args)

    def addL3Route(self, *args):
        return _nx_sdk_py.NxRibMgr_addL3Route(self, *args)

    def delL3Route(self, *args):
        return _nx_sdk_py.NxRibMgr_delL3Route(self, *args)

    def sendMyL3RoutesToRib(self, *args):
        return _nx_sdk_py.NxRibMgr_sendMyL3RoutesToRib(self, *args)

    def converged(self, *args):
        return _nx_sdk_py.NxRibMgr_converged(self, *args)
NxRibMgr_swigregister = _nx_sdk_py.NxRibMgr_swigregister
NxRibMgr_swigregister(NxRibMgr)

class NxAdj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxAdj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxAdj, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nx_sdk_py.delete_NxAdj
    __del__ = lambda self: None

    def getIpAddr(self):
        return _nx_sdk_py.NxAdj_getIpAddr(self)

    def getMacAddr(self):
        return _nx_sdk_py.NxAdj_getMacAddr(self)

    def getVrf(self):
        return _nx_sdk_py.NxAdj_getVrf(self)

    def getIntfName(self):
        return _nx_sdk_py.NxAdj_getIntfName(self)

    def getPhyIntfName(self):
        return _nx_sdk_py.NxAdj_getPhyIntfName(self)

    def getPreference(self):
        return _nx_sdk_py.NxAdj_getPreference(self)

    def getSource(self):
        return _nx_sdk_py.NxAdj_getSource(self)

    def getEvent(self):
        return _nx_sdk_py.NxAdj_getEvent(self)

    def getAF(self):
        return _nx_sdk_py.NxAdj_getAF(self)

    def __eq__(self, adj_obj):
        return _nx_sdk_py.NxAdj___eq__(self, adj_obj)

    def __ne__(self, adj_obj):
        return _nx_sdk_py.NxAdj___ne__(self, adj_obj)

    def equal(self, adj_obj):
        return _nx_sdk_py.NxAdj_equal(self, adj_obj)
NxAdj_swigregister = _nx_sdk_py.NxAdj_swigregister
NxAdj_swigregister(NxAdj)

class NxAdjMgrHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxAdjMgrHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxAdjMgrHandler, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _nx_sdk_py.delete_NxAdjMgrHandler
    __del__ = lambda self: None

    def postAdjCb(self, adj_obj):
        return _nx_sdk_py.NxAdjMgrHandler_postAdjCb(self, adj_obj)

    def postAdjIPv4DownloadDone(self, intfName, ipv4_addr):
        return _nx_sdk_py.NxAdjMgrHandler_postAdjIPv4DownloadDone(self, intfName, ipv4_addr)

    def postAdjIPv6DownloadDone(self, intfName, ipv6_addr):
        return _nx_sdk_py.NxAdjMgrHandler_postAdjIPv6DownloadDone(self, intfName, ipv6_addr)

    def __init__(self):
        if self.__class__ == NxAdjMgrHandler:
            _self = None
        else:
            _self = self
        this = _nx_sdk_py.new_NxAdjMgrHandler(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _nx_sdk_py.disown_NxAdjMgrHandler(self)
        return weakref_proxy(self)
NxAdjMgrHandler_swigregister = _nx_sdk_py.NxAdjMgrHandler_swigregister
NxAdjMgrHandler_swigregister(NxAdjMgrHandler)

class NxAdjMgr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxAdjMgr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxAdjMgr, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nx_sdk_py.delete_NxAdjMgr
    __del__ = lambda self: None

    def getAdj(self, intfName, ipAddr):
        return _nx_sdk_py.NxAdjMgr_getAdj(self, intfName, ipAddr)

    def discoverAdj(self, intfName, ipAddr):
        return _nx_sdk_py.NxAdjMgr_discoverAdj(self, intfName, ipAddr)

    def watchAllAdjs(self, *args):
        return _nx_sdk_py.NxAdjMgr_watchAllAdjs(self, *args)

    def unwatchAllAdjs(self, *args):
        return _nx_sdk_py.NxAdjMgr_unwatchAllAdjs(self, *args)

    def watchAdj(self, *args):
        return _nx_sdk_py.NxAdjMgr_watchAdj(self, *args)

    def unwatchAdj(self, *args):
        return _nx_sdk_py.NxAdjMgr_unwatchAdj(self, *args)

    def setAdjMgrHandler(self, handler):
        return _nx_sdk_py.NxAdjMgr_setAdjMgrHandler(self, handler)

    def unsetAdjMgrHandler(self):
        return _nx_sdk_py.NxAdjMgr_unsetAdjMgrHandler(self)

    def getAdjMgrHandler(self):
        return _nx_sdk_py.NxAdjMgr_getAdjMgrHandler(self)
NxAdjMgr_swigregister = _nx_sdk_py.NxAdjMgr_swigregister
NxAdjMgr_swigregister(NxAdjMgr)

class NxMac(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxMac, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxMac, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nx_sdk_py.delete_NxMac
    __del__ = lambda self: None

    def getMacAddress(self):
        return _nx_sdk_py.NxMac_getMacAddress(self)

    def getType(self):
        return _nx_sdk_py.NxMac_getType(self)

    def getVlan(self):
        return _nx_sdk_py.NxMac_getVlan(self)

    def getIntfName(self):
        return _nx_sdk_py.NxMac_getIntfName(self)

    def getEvent(self):
        return _nx_sdk_py.NxMac_getEvent(self)

    def __eq__(self, mac_obj):
        return _nx_sdk_py.NxMac___eq__(self, mac_obj)

    def __ne__(self, mac_obj):
        return _nx_sdk_py.NxMac___ne__(self, mac_obj)

    def equal(self, mac_obj):
        return _nx_sdk_py.NxMac_equal(self, mac_obj)
NxMac_swigregister = _nx_sdk_py.NxMac_swigregister
NxMac_swigregister(NxMac)

class NxMacMgrHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxMacMgrHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxMacMgrHandler, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _nx_sdk_py.delete_NxMacMgrHandler
    __del__ = lambda self: None

    def postMacHandlerCb(self, mac_obj):
        return _nx_sdk_py.NxMacMgrHandler_postMacHandlerCb(self, mac_obj)

    def postMacHandlerDownloadCb(self, id, macaddr):
        return _nx_sdk_py.NxMacMgrHandler_postMacHandlerDownloadCb(self, id, macaddr)

    def __init__(self):
        if self.__class__ == NxMacMgrHandler:
            _self = None
        else:
            _self = self
        this = _nx_sdk_py.new_NxMacMgrHandler(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _nx_sdk_py.disown_NxMacMgrHandler(self)
        return weakref_proxy(self)
NxMacMgrHandler_swigregister = _nx_sdk_py.NxMacMgrHandler_swigregister
NxMacMgrHandler_swigregister(NxMacMgrHandler)

class NxMacMgr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxMacMgr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxMacMgr, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nx_sdk_py.delete_NxMacMgr
    __del__ = lambda self: None

    def addStaticMac(self, macAddr, vlan, intf_name):
        return _nx_sdk_py.NxMacMgr_addStaticMac(self, macAddr, vlan, intf_name)

    def delStaticMac(self, macAddr, vlan):
        return _nx_sdk_py.NxMacMgr_delStaticMac(self, macAddr, vlan)

    def getMac(self, macAddr, vlan, clearBuffer=False):
        return _nx_sdk_py.NxMacMgr_getMac(self, macAddr, vlan, clearBuffer)

    def watchAllMac(self, download=True):
        return _nx_sdk_py.NxMacMgr_watchAllMac(self, download)

    def unwatchAllMac(self):
        return _nx_sdk_py.NxMacMgr_unwatchAllMac(self)

    def watchMac(self, *args):
        return _nx_sdk_py.NxMacMgr_watchMac(self, *args)

    def unwatchMac(self, *args):
        return _nx_sdk_py.NxMacMgr_unwatchMac(self, *args)

    def setMacMgrHandler(self, handler):
        return _nx_sdk_py.NxMacMgr_setMacMgrHandler(self, handler)

    def getMacMgrHandler(self):
        return _nx_sdk_py.NxMacMgr_getMacMgrHandler(self)
NxMacMgr_swigregister = _nx_sdk_py.NxMacMgr_swigregister
NxMacMgr_swigregister(NxMacMgr)

class NxException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxException, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nx_sdk_py.delete_NxException
    __del__ = lambda self: None

    def what(self):
        return _nx_sdk_py.NxException_what(self)

    def getErrCode(self):
        return _nx_sdk_py.NxException_getErrCode(self)

    def getErrModule(self):
        return _nx_sdk_py.NxException_getErrModule(self)

    def getErrSeverity(self):
        return _nx_sdk_py.NxException_getErrSeverity(self)

    def getErrApi(self):
        return _nx_sdk_py.NxException_getErrApi(self)
NxException_swigregister = _nx_sdk_py.NxException_swigregister
NxException_swigregister(NxException)

ERR_ESUCCESS = _nx_sdk_py.ERR_ESUCCESS
ERR_INVALID_USAGE = _nx_sdk_py.ERR_INVALID_USAGE
ERR_INVALID = _nx_sdk_py.ERR_INVALID
ERR_NULL_PTR = _nx_sdk_py.ERR_NULL_PTR
ERR_NOT_FOUND = _nx_sdk_py.ERR_NOT_FOUND
ERR_EXISTS = _nx_sdk_py.ERR_EXISTS
ERR_EMPTY = _nx_sdk_py.ERR_EMPTY
ERR_MAX_LIMIT = _nx_sdk_py.ERR_MAX_LIMIT
ERR_FAILURE = _nx_sdk_py.ERR_FAILURE
ERR_ESUCCESS_MORE = _nx_sdk_py.ERR_ESUCCESS_MORE
ERR_SIGINT = _nx_sdk_py.ERR_SIGINT
ERR_ENOMEM = _nx_sdk_py.ERR_ENOMEM
ERR_BADFD = _nx_sdk_py.ERR_BADFD
ERR_UNKNOWN = _nx_sdk_py.ERR_UNKNOWN
ERR_REMOTE_DOWN = _nx_sdk_py.ERR_REMOTE_DOWN
ERR_REMOTE_SDK_OBJS_OBSOLETE = _nx_sdk_py.ERR_REMOTE_SDK_OBJS_OBSOLETE
R_TEXT = _nx_sdk_py.R_TEXT
R_JSON = _nx_sdk_py.R_JSON
R_XML = _nx_sdk_py.R_XML
R_MAX_TYPE = _nx_sdk_py.R_MAX_TYPE
NO_EVENT = _nx_sdk_py.NO_EVENT
ADD = _nx_sdk_py.ADD
DELETE = _nx_sdk_py.DELETE
UPDATE = _nx_sdk_py.UPDATE
DOWNLOAD = _nx_sdk_py.DOWNLOAD
DOWNLOAD_DONE = _nx_sdk_py.DOWNLOAD_DONE
E_MAX_TYPE = _nx_sdk_py.E_MAX_TYPE
UNKNOWN = _nx_sdk_py.UNKNOWN
DOWN = _nx_sdk_py.DOWN
UP = _nx_sdk_py.UP
S_MAX_TYPE = _nx_sdk_py.S_MAX_TYPE
NONE = _nx_sdk_py.NONE
VXLAN = _nx_sdk_py.VXLAN
ENCAP_MAX_TYPE = _nx_sdk_py.ENCAP_MAX_TYPE
AF_START = _nx_sdk_py.AF_START
AF_IPV4 = _nx_sdk_py.AF_IPV4
AF_IPV6 = _nx_sdk_py.AF_IPV6
MAX_AF = _nx_sdk_py.MAX_AF
LOW_PRIO = _nx_sdk_py.LOW_PRIO
MED_PRIO = _nx_sdk_py.MED_PRIO
HIGH_PRIO = _nx_sdk_py.HIGH_PRIO
NO_PRIO = _nx_sdk_py.NO_PRIO
NX_TYPE_UNKNOWN = _nx_sdk_py.NX_TYPE_UNKNOWN
NX_TYPE_ETH = _nx_sdk_py.NX_TYPE_ETH
NX_TYPE_SVI = _nx_sdk_py.NX_TYPE_SVI
NX_TYPE_ETH_PC = _nx_sdk_py.NX_TYPE_ETH_PC
NX_TYPE_LOOPBACK = _nx_sdk_py.NX_TYPE_LOOPBACK
NX_TYPE_SUBINTF = _nx_sdk_py.NX_TYPE_SUBINTF
NX_TYPE_TUNNEL = _nx_sdk_py.NX_TYPE_TUNNEL
NX_TYPE_MGMT = _nx_sdk_py.NX_TYPE_MGMT
NX_TYPE_MAX = _nx_sdk_py.NX_TYPE_MAX
TYPE_NO_TYPE = _nx_sdk_py.TYPE_NO_TYPE
TYPE_STATIC = _nx_sdk_py.TYPE_STATIC
TYPE_DYNAMIC = _nx_sdk_py.TYPE_DYNAMIC
TYPE_MAX_TYPE = _nx_sdk_py.TYPE_MAX_TYPE
BASH = _nx_sdk_py.BASH
VSH = _nx_sdk_py.VSH
REMOTE = _nx_sdk_py.REMOTE
P_START_TYPE = _nx_sdk_py.P_START_TYPE
P_STRING = _nx_sdk_py.P_STRING
P_INTEGER = _nx_sdk_py.P_INTEGER
P_INTERFACE = _nx_sdk_py.P_INTERFACE
P_IP_ADDR = _nx_sdk_py.P_IP_ADDR
P_MAC_ADDR = _nx_sdk_py.P_MAC_ADDR
P_VRF = _nx_sdk_py.P_VRF
P_MAX_TYPE = _nx_sdk_py.P_MAX_TYPE
class cli_param_type_integer_attr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cli_param_type_integer_attr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cli_param_type_integer_attr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["min_val"] = _nx_sdk_py.cli_param_type_integer_attr_min_val_set
    __swig_getmethods__["min_val"] = _nx_sdk_py.cli_param_type_integer_attr_min_val_get
    if _newclass:
        min_val = _swig_property(_nx_sdk_py.cli_param_type_integer_attr_min_val_get, _nx_sdk_py.cli_param_type_integer_attr_min_val_set)
    __swig_setmethods__["max_val"] = _nx_sdk_py.cli_param_type_integer_attr_max_val_set
    __swig_getmethods__["max_val"] = _nx_sdk_py.cli_param_type_integer_attr_max_val_get
    if _newclass:
        max_val = _swig_property(_nx_sdk_py.cli_param_type_integer_attr_max_val_get, _nx_sdk_py.cli_param_type_integer_attr_max_val_set)

    def __len__(self):
        return _nx_sdk_py.cli_param_type_integer_attr___len__(self)

    def __init__(self):
        this = _nx_sdk_py.new_cli_param_type_integer_attr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nx_sdk_py.delete_cli_param_type_integer_attr
    __del__ = lambda self: None
cli_param_type_integer_attr_swigregister = _nx_sdk_py.cli_param_type_integer_attr_swigregister
cli_param_type_integer_attr_swigregister(cli_param_type_integer_attr)

class cli_param_type_string_attr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cli_param_type_string_attr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cli_param_type_string_attr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _nx_sdk_py.cli_param_type_string_attr_length_set
    __swig_getmethods__["length"] = _nx_sdk_py.cli_param_type_string_attr_length_get
    if _newclass:
        length = _swig_property(_nx_sdk_py.cli_param_type_string_attr_length_get, _nx_sdk_py.cli_param_type_string_attr_length_set)
    __swig_setmethods__["regex_pattern"] = _nx_sdk_py.cli_param_type_string_attr_regex_pattern_set
    __swig_getmethods__["regex_pattern"] = _nx_sdk_py.cli_param_type_string_attr_regex_pattern_get
    if _newclass:
        regex_pattern = _swig_property(_nx_sdk_py.cli_param_type_string_attr_regex_pattern_get, _nx_sdk_py.cli_param_type_string_attr_regex_pattern_set)

    def __len__(self):
        return _nx_sdk_py.cli_param_type_string_attr___len__(self)

    def __init__(self):
        this = _nx_sdk_py.new_cli_param_type_string_attr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nx_sdk_py.delete_cli_param_type_string_attr
    __del__ = lambda self: None
cli_param_type_string_attr_swigregister = _nx_sdk_py.cli_param_type_string_attr_swigregister
cli_param_type_string_attr_swigregister(cli_param_type_string_attr)

class cli_param_type_ip_addr_attr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cli_param_type_ip_addr_attr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cli_param_type_ip_addr_attr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["is_ipv6"] = _nx_sdk_py.cli_param_type_ip_addr_attr_is_ipv6_set
    __swig_getmethods__["is_ipv6"] = _nx_sdk_py.cli_param_type_ip_addr_attr_is_ipv6_get
    if _newclass:
        is_ipv6 = _swig_property(_nx_sdk_py.cli_param_type_ip_addr_attr_is_ipv6_get, _nx_sdk_py.cli_param_type_ip_addr_attr_is_ipv6_set)
    __swig_setmethods__["is_prefix"] = _nx_sdk_py.cli_param_type_ip_addr_attr_is_prefix_set
    __swig_getmethods__["is_prefix"] = _nx_sdk_py.cli_param_type_ip_addr_attr_is_prefix_get
    if _newclass:
        is_prefix = _swig_property(_nx_sdk_py.cli_param_type_ip_addr_attr_is_prefix_get, _nx_sdk_py.cli_param_type_ip_addr_attr_is_prefix_set)

    def __len__(self):
        return _nx_sdk_py.cli_param_type_ip_addr_attr___len__(self)

    def __init__(self):
        this = _nx_sdk_py.new_cli_param_type_ip_addr_attr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nx_sdk_py.delete_cli_param_type_ip_addr_attr
    __del__ = lambda self: None
cli_param_type_ip_addr_attr_swigregister = _nx_sdk_py.cli_param_type_ip_addr_attr_swigregister
cli_param_type_ip_addr_attr_swigregister(cli_param_type_ip_addr_attr)

class NxIntf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxIntf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxIntf, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nx_sdk_py.delete_NxIntf
    __del__ = lambda self: None

    def getName(self):
        return _nx_sdk_py.NxIntf_getName(self)

    def getLayer(self):
        return _nx_sdk_py.NxIntf_getLayer(self)

    def getType(self):
        return _nx_sdk_py.NxIntf_getType(self)

    def getVrf(self):
        return _nx_sdk_py.NxIntf_getVrf(self)

    def getVlan(self):
        return _nx_sdk_py.NxIntf_getVlan(self)

    def getDescription(self):
        return _nx_sdk_py.NxIntf_getDescription(self)

    def getL3PrAddr(self, af):
        return _nx_sdk_py.NxIntf_getL3PrAddr(self, af)

    def getL3ScAddr(self, af, fromFirst=False):
        return _nx_sdk_py.NxIntf_getL3ScAddr(self, af, fromFirst)

    def getL2Address(self):
        return _nx_sdk_py.NxIntf_getL2Address(self)

    def getL2AddressHW(self):
        return _nx_sdk_py.NxIntf_getL2AddressHW(self)

    def getAdminState(self):
        return _nx_sdk_py.NxIntf_getAdminState(self)

    def getOperState(self):
        return _nx_sdk_py.NxIntf_getOperState(self)

    def getMtu(self):
        return _nx_sdk_py.NxIntf_getMtu(self)

    def getSpeed(self):
        return _nx_sdk_py.NxIntf_getSpeed(self)

    def getMemberCount(self):
        return _nx_sdk_py.NxIntf_getMemberCount(self)

    def getMembers(self, fromFirst=False):
        return _nx_sdk_py.NxIntf_getMembers(self, fromFirst)

    def getEvent(self):
        return _nx_sdk_py.NxIntf_getEvent(self)

    def getLastMod(self):
        return _nx_sdk_py.NxIntf_getLastMod(self)

    def setLayer(self, layer):
        return _nx_sdk_py.NxIntf_setLayer(self, layer)

    def setVrf(self, vrf):
        return _nx_sdk_py.NxIntf_setVrf(self, vrf)

    def setVlan(self, vlan_id):
        return _nx_sdk_py.NxIntf_setVlan(self, vlan_id)

    def setDescription(self, desc):
        return _nx_sdk_py.NxIntf_setDescription(self, desc)

    def setL3Address(self, addr, type, primary):
        return _nx_sdk_py.NxIntf_setL3Address(self, addr, type, primary)

    def setL2Address(self, mac):
        return _nx_sdk_py.NxIntf_setL2Address(self, mac)

    def setAdminState(self, state):
        return _nx_sdk_py.NxIntf_setAdminState(self, state)

    def setMtu(self, mtu):
        return _nx_sdk_py.NxIntf_setMtu(self, mtu)

    def setSpeed(self, speed):
        return _nx_sdk_py.NxIntf_setSpeed(self, speed)

    def addMember(self, intf_name):
        return _nx_sdk_py.NxIntf_addMember(self, intf_name)

    def delMember(self, intf_name):
        return _nx_sdk_py.NxIntf_delMember(self, intf_name)

    def __eq__(self, intf_obj):
        return _nx_sdk_py.NxIntf___eq__(self, intf_obj)

    def __ne__(self, intf_obj):
        return _nx_sdk_py.NxIntf___ne__(self, intf_obj)

    def equal(self, intf_obj):
        return _nx_sdk_py.NxIntf_equal(self, intf_obj)
NxIntf_swigregister = _nx_sdk_py.NxIntf_swigregister
NxIntf_swigregister(NxIntf)
INTF_SPEED_AUTO = _nx_sdk_py.INTF_SPEED_AUTO
INTF_SPEED_100M = _nx_sdk_py.INTF_SPEED_100M
INTF_SPEED_1G = _nx_sdk_py.INTF_SPEED_1G
INTF_SPEED_10G = _nx_sdk_py.INTF_SPEED_10G
INTF_SPEED_100G = _nx_sdk_py.INTF_SPEED_100G
INTF_SPEED_25G = _nx_sdk_py.INTF_SPEED_25G
INTF_SPEED_40G = _nx_sdk_py.INTF_SPEED_40G
INTF_SPEED_AUTO_100 = _nx_sdk_py.INTF_SPEED_AUTO_100
INTF_SPEED_AUTO_100_1000 = _nx_sdk_py.INTF_SPEED_AUTO_100_1000

class NxIntfMgrHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxIntfMgrHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxIntfMgrHandler, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _nx_sdk_py.delete_NxIntfMgrHandler
    __del__ = lambda self: None

    def postIntfAddDelCb(self, obj):
        return _nx_sdk_py.NxIntfMgrHandler_postIntfAddDelCb(self, obj)

    def postIntfIpv4AddrCb(self, obj):
        return _nx_sdk_py.NxIntfMgrHandler_postIntfIpv4AddrCb(self, obj)

    def postIntfIpv6AddrCb(self, obj):
        return _nx_sdk_py.NxIntfMgrHandler_postIntfIpv6AddrCb(self, obj)

    def postIntfStateCb(self, obj):
        return _nx_sdk_py.NxIntfMgrHandler_postIntfStateCb(self, obj)

    def postIntfLayerCb(self, obj):
        return _nx_sdk_py.NxIntfMgrHandler_postIntfLayerCb(self, obj)

    def postIntfPortMemberCb(self, obj):
        return _nx_sdk_py.NxIntfMgrHandler_postIntfPortMemberCb(self, obj)

    def postIntfVrfCb(self, obj):
        return _nx_sdk_py.NxIntfMgrHandler_postIntfVrfCb(self, obj)

    def postIntfVlanCb(self, obj):
        return _nx_sdk_py.NxIntfMgrHandler_postIntfVlanCb(self, obj)

    def __init__(self):
        if self.__class__ == NxIntfMgrHandler:
            _self = None
        else:
            _self = self
        this = _nx_sdk_py.new_NxIntfMgrHandler(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _nx_sdk_py.disown_NxIntfMgrHandler(self)
        return weakref_proxy(self)
NxIntfMgrHandler_swigregister = _nx_sdk_py.NxIntfMgrHandler_swigregister
NxIntfMgrHandler_swigregister(NxIntfMgrHandler)

class NxIntfMgr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxIntfMgr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxIntfMgr, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nx_sdk_py.delete_NxIntfMgr
    __del__ = lambda self: None

    def iterateIntf(self, fromFirst=False):
        return _nx_sdk_py.NxIntfMgr_iterateIntf(self, fromFirst)

    def getIntf(self, name):
        return _nx_sdk_py.NxIntfMgr_getIntf(self, name)

    def getIntfAll(self):
        return _nx_sdk_py.NxIntfMgr_getIntfAll(self)

    def closeIntfAll(self):
        return _nx_sdk_py.NxIntfMgr_closeIntfAll(self)

    def addIntf(self, name):
        return _nx_sdk_py.NxIntfMgr_addIntf(self, name)

    def removeIntf(self, name, del_sdk=False):
        return _nx_sdk_py.NxIntfMgr_removeIntf(self, name, del_sdk)

    def watchIntf(self, name):
        return _nx_sdk_py.NxIntfMgr_watchIntf(self, name)

    def unWatchIntf(self, name):
        return _nx_sdk_py.NxIntfMgr_unWatchIntf(self, name)

    def setIntfHandler(self, handler):
        return _nx_sdk_py.NxIntfMgr_setIntfHandler(self, handler)

    def getIntfHandler(self):
        return _nx_sdk_py.NxIntfMgr_getIntfHandler(self)
NxIntfMgr_swigregister = _nx_sdk_py.NxIntfMgr_swigregister
NxIntfMgr_swigregister(NxIntfMgr)

class NxDme(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxDme, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxDme, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nx_sdk_py.delete_NxDme
    __del__ = lambda self: None

    def getDn(self):
        return _nx_sdk_py.NxDme_getDn(self)

    def setProperty(self, sInPropName, sInValue, err):
        return _nx_sdk_py.NxDme_setProperty(self, sInPropName, sInValue, err)

    def getProperty(self, sInPropName, err):
        return _nx_sdk_py.NxDme_getProperty(self, sInPropName, err)

    def commit(self, err):
        return _nx_sdk_py.NxDme_commit(self, err)

    def getDataJson(self):
        return _nx_sdk_py.NxDme_getDataJson(self)

    def iterateProperties(self, fromFirst=False):
        return _nx_sdk_py.NxDme_iterateProperties(self, fromFirst)

    def getEvent(self):
        return _nx_sdk_py.NxDme_getEvent(self)

    def getEventIsPropertyChanged(self, sInPropName):
        return _nx_sdk_py.NxDme_getEventIsPropertyChanged(self, sInPropName)

    def iterateEventUpdatedProperties(self, fromFirst=False):
        return _nx_sdk_py.NxDme_iterateEventUpdatedProperties(self, fromFirst)

    def __eq__(self, dme_obj):
        return _nx_sdk_py.NxDme___eq__(self, dme_obj)

    def __ne__(self, dme_obj):
        return _nx_sdk_py.NxDme___ne__(self, dme_obj)

    def equal(self, dme_obj):
        return _nx_sdk_py.NxDme_equal(self, dme_obj)

    def getChildrenDmeObjCount(self):
        return _nx_sdk_py.NxDme_getChildrenDmeObjCount(self)

    def iterateChildrenDmeDn(self, fromFirst=False):
        return _nx_sdk_py.NxDme_iterateChildrenDmeDn(self, fromFirst)

    def isModified(self):
        return _nx_sdk_py.NxDme_isModified(self)

    def getEventPropertyValue(self, sInPropName, err):
        return _nx_sdk_py.NxDme_getEventPropertyValue(self, sInPropName, err)
NxDme_swigregister = _nx_sdk_py.NxDme_swigregister
NxDme_swigregister(NxDme)

class NxDmeMgrHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxDmeMgrHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxDmeMgrHandler, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _nx_sdk_py.delete_NxDmeMgrHandler
    __del__ = lambda self: None

    def postDmeHandlerCb(self, objp):
        return _nx_sdk_py.NxDmeMgrHandler_postDmeHandlerCb(self, objp)

    def postDmeHandlerDownloadDoneCb(self, dn):
        return _nx_sdk_py.NxDmeMgrHandler_postDmeHandlerDownloadDoneCb(self, dn)

    def __init__(self):
        if self.__class__ == NxDmeMgrHandler:
            _self = None
        else:
            _self = self
        this = _nx_sdk_py.new_NxDmeMgrHandler(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _nx_sdk_py.disown_NxDmeMgrHandler(self)
        return weakref_proxy(self)
NxDmeMgrHandler_swigregister = _nx_sdk_py.NxDmeMgrHandler_swigregister
NxDmeMgrHandler_swigregister(NxDmeMgrHandler)

class NxDmeMgr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NxDmeMgr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NxDmeMgr, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nx_sdk_py.delete_NxDmeMgr
    __del__ = lambda self: None

    def getDmeObj(self, Dn, getChildren=False):
        return _nx_sdk_py.NxDmeMgr_getDmeObj(self, Dn, getChildren)

    def addDmeObj(self, sInDn, error):
        return _nx_sdk_py.NxDmeMgr_addDmeObj(self, sInDn, error)

    def delDmeObj(self, sInDn):
        return _nx_sdk_py.NxDmeMgr_delDmeObj(self, sInDn)

    def getMoJson(self, sInDn, error):
        return _nx_sdk_py.NxDmeMgr_getMoJson(self, sInDn, error)

    def getChildrenMoJson(self, sInDn, error):
        return _nx_sdk_py.NxDmeMgr_getChildrenMoJson(self, sInDn, error)

    def existsDmeObj(self, sInDn):
        return _nx_sdk_py.NxDmeMgr_existsDmeObj(self, sInDn)

    def watch(self, *args):
        return _nx_sdk_py.NxDmeMgr_watch(self, *args)

    def unwatch(self, *args):
        return _nx_sdk_py.NxDmeMgr_unwatch(self, *args)

    def setDmeHandler(self, handler):
        return _nx_sdk_py.NxDmeMgr_setDmeHandler(self, handler)

    def getDmeHandler(self):
        return _nx_sdk_py.NxDmeMgr_getDmeHandler(self)
NxDmeMgr_swigregister = _nx_sdk_py.NxDmeMgr_swigregister
NxDmeMgr_swigregister(NxDmeMgr)


def void_to_string(x):
    return _nx_sdk_py.void_to_string(x)
void_to_string = _nx_sdk_py.void_to_string

def void_to_int(x):
    return _nx_sdk_py.void_to_int(x)
void_to_int = _nx_sdk_py.void_to_int

def void_to_cli_param_type_integer_attr(x):
    return _nx_sdk_py.void_to_cli_param_type_integer_attr(x)
void_to_cli_param_type_integer_attr = _nx_sdk_py.void_to_cli_param_type_integer_attr

def new_boolp():
    return _nx_sdk_py.new_boolp()
new_boolp = _nx_sdk_py.new_boolp

def copy_boolp(value):
    return _nx_sdk_py.copy_boolp(value)
copy_boolp = _nx_sdk_py.copy_boolp

def delete_boolp(obj):
    return _nx_sdk_py.delete_boolp(obj)
delete_boolp = _nx_sdk_py.delete_boolp

def boolp_assign(obj, value):
    return _nx_sdk_py.boolp_assign(obj, value)
boolp_assign = _nx_sdk_py.boolp_assign

def boolp_value(obj):
    return _nx_sdk_py.boolp_value(obj)
boolp_value = _nx_sdk_py.boolp_value

def new_intp():
    return _nx_sdk_py.new_intp()
new_intp = _nx_sdk_py.new_intp

def copy_intp(value):
    return _nx_sdk_py.copy_intp(value)
copy_intp = _nx_sdk_py.copy_intp

def delete_intp(obj):
    return _nx_sdk_py.delete_intp(obj)
delete_intp = _nx_sdk_py.delete_intp

def intp_assign(obj, value):
    return _nx_sdk_py.intp_assign(obj, value)
intp_assign = _nx_sdk_py.intp_assign

def intp_value(obj):
    return _nx_sdk_py.intp_value(obj)
intp_value = _nx_sdk_py.intp_value
# This file is compatible with both classic and new-style classes.


