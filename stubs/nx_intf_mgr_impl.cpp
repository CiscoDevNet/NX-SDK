/** **********************************************************************
    * This file is auto-generated by nxsdk_remote_stub_gen.py 
    * at 2019-07-18 23:18:33.443047
    * 
    * Copyright (c) 2017 by cisco Systems, Inc.
    *
    * All rights reserved.
************************************************************************/
#include "nx_intf_mgr_impl.h" 
   
using namespace nxos;

   
    
// Implementation for class  
NxIntfImpl::NxIntfImpl()
{

}

NxIntfImpl::~NxIntfImpl()
{

}

std::string 
NxIntfImpl::getName()
{
   return "";
}

std::string 
NxIntfImpl::getLayer()
{
   return "";
}

nxos::intf_type_e 
NxIntfImpl::getType()
{
   return (nxos::intf_type_e)0;
}

std::string 
NxIntfImpl::getVrf()
{
   return "";
}

std::string 
NxIntfImpl::getVlan()
{
   return "";
}

std::string 
NxIntfImpl::getDescription()
{
   return "";
}

std::string 
NxIntfImpl::getL3PrAddr(af_e af)
{
   return "";
}

std::string 
NxIntfImpl::getL3ScAddr(af_e af, bool fromFirst)
{
   return "";
}

std::string 
NxIntfImpl::getL2Address()
{
   return "";
}

std::string 
NxIntfImpl::getL2AddressHW()
{
   return "";
}

nxos::state_type_e 
NxIntfImpl::getAdminState()
{
   return (nxos::state_type_e)0;
}

nxos::state_type_e 
NxIntfImpl::getOperState()
{
   return (nxos::state_type_e)0;
}

uint32_t 
NxIntfImpl::getMtu()
{
   return (uint32_t)0;
}

uint32_t 
NxIntfImpl::getSpeed()
{
   return (uint32_t)0;
}

unsigned int 
NxIntfImpl::getMemberCount()
{
   return (unsigned int)0;
}

std::string 
NxIntfImpl::getMembers(bool fromFirst)
{
   return "";
}

nxos::event_type_e 
NxIntfImpl::getEvent()
{
   return (nxos::event_type_e)0;
}

std::string 
NxIntfImpl::getLastMod()
{
   return "";
}

bool 
NxIntfImpl::setLayer(const std::string& layer)
{
   return false;
}

bool 
NxIntfImpl::setVrf(const std::string& vrf)
{
   return false;
}

bool 
NxIntfImpl::setVlan(unsigned int vlan_id)
{
   return false;
}

bool 
NxIntfImpl::setDescription(const std::string& desc)
{
   return false;
}

bool 
NxIntfImpl::setL3Address(const std::string& addr, af_e type, bool primary)
{
   return false;
}

bool 
NxIntfImpl::setL2Address(const std::string& mac)
{
   return false;
}

bool 
NxIntfImpl::setAdminState(nxos::state_type_e state)
{
   return false;
}

bool 
NxIntfImpl::setMtu(uint32_t mtu)
{
   return false;
}

bool 
NxIntfImpl::setSpeed(uint32_t speed)
{
   return false;
}

bool 
NxIntfImpl::addMember(const std::string& intf_name)
{
   return false;
}

bool 
NxIntfImpl::delMember(const std::string& intf_name)
{
   return false;
}

bool 
NxIntfImpl::operator==(NxIntf const& intf_obj) const
{
   return false;
}

bool 
NxIntfImpl::operator!=(NxIntf const& intf_obj) const
{
   return false;
}

bool 
NxIntfImpl::equal(NxIntf const& intf_obj) const
{
   return false;
}
    
// Implementation for class  
NxIntfMgrImpl::NxIntfMgrImpl()
{

}

NxIntfMgrImpl::~NxIntfMgrImpl()
{

}

NxIntf* 
NxIntfMgrImpl::iterateIntf(bool fromFirst)
{
   return NULL;
}

NxIntf* 
NxIntfMgrImpl::getIntf(std::string name)
{
   return NULL;
}

bool 
NxIntfMgrImpl::getIntfAll()
{
   return false;
}

bool 
NxIntfMgrImpl::closeIntfAll()
{
   return false;
}

NxIntf* 
NxIntfMgrImpl::addIntf(std::string name)
{
   return NULL;
}

bool 
NxIntfMgrImpl::removeIntf(std::string name, bool del_sdk)
{
   return false;
}

bool 
NxIntfMgrImpl::watchIntf(std::string name)
{
   return false;
}

bool 
NxIntfMgrImpl::unWatchIntf(std::string name)
{
   return false;
}

void 
NxIntfMgrImpl::setIntfHandler(NxIntfMgrHandler* handler)
{
   return;
}

NxIntfMgrHandler* 
NxIntfMgrImpl::getIntfHandler()
{
   return NULL;
}